# JavaScript (synctonous식 언어)
	+ setTimeout(function(){'내용'}, 3000) 
	  //3초 뒤에 function 실행
	  // 효율적이지 않다.

1. async , await , promise (asyncronous식)
	- TMI : async와 await라는 특별한 문법을 사용하면 프라미스를 좀 더 편하게 사용할 수 있다.
				function 키워드 앞에 async만 붙여주면 되고 비동기로 처리되는 부분 앞에 await만 붙여주면 된다.
					await 함수는 변수에 넣어서 활용하자 그래야지 에러찾기도 쉽다. 이에 비해 promise는 에러가 어디서 낫는지 찾기가 힘들다.
						
			
	+ async : 평범한 함수에 promise를 return하는 비동기적인 함수로 만들어주는 키워드. 
	+ await : '함수가 실행되기를 기다리라는 뜻', await함수는 다른 함수 안에서 실행 되어야한다. 다른 함수라는 함수 앞에는 async라는 키워드가 앞에 붙어있어야한다.
	+ promise : fetch, then, catch		참고 사이트 => https://learnjs.vlpt.us/async/01-promise.html
	
		fetch : 'A Promise that resolves to a Response object.' => fetch의 return값은 Promise이고 함수(fetch)가 성공적으로 실행이되면 Response라는 object를 줄 것이다.
		
		then이 호출 될 때 : fetch를 통해서 실행한 결과가 "성공"했을때 then으로 전달된 콜백 함수(function(resolved){})가 호출된다. 결과는 파라미터의 변수로 들어간다.
						
		catch이 호출 될 때 : fetch를 통해서 실행한 결과가 "실패"했을때 catch로 전달된 콜백 함수가 호출된다. 실패의 이유는 파라미터의 변수로 들어간다.
		
2. promise, then, catch / async,await 두 가지 사용 용도의 차이점 
	2-1) 에러핸들링 ==> 
			promise를 활용할 경우 .catch()문을 통해 에러 핸들링이 가능하다.
				하지만 async/await은 에러 핸들링 할 수 있는 기능이 없어 try-catch문을 활용하여 예외처리를 할 수 있다.
	2-2) 코드 가독성 ==> promist의 .then()지옥 가능성이있다.
			코드가 길어지면 길어질수록, async/await 를 활용한 코드가 가독성이 좋다.
				async/await 은 비동기 코드가 동기 코드처럼 읽히게 해준다. 코드 흐름을 이해 하기 쉽다.
					async는 에러 위치를 찾기 쉽다


3. 동기(syncronous), 비동기(asyncronous) 차이점 (왜, 언제 쓰는지?)
	- 동기 : 
		1. 데이터의 요청과 결과가 한 자리에서 동시에 일어나는 것(요청을 하면 시간이 얼마나 걸리던지 요청한 자리에서 결과가 주어져야 함.)
		2. 설계가 매우 간단하고 직관적이다.
		3. 코드의 흐름을 알기 쉽다.
	- 비동기 : 
		1. 데이터의 요청과 결과가 동시에 일어나지 않는다.(데이터를 요청하여도 다른 활동을 수행하여도 된다.)
		2. 동기식보다 설계가 복잡하다.(ex : AJAX...)
		3. 코드의 흐름을 알기 어렵다. promise는 function으로 결과를 호출하지만 async는 변수로 에러의 위치를 찾기 쉽다.
		
		
4. 블록, 논블록(블록 과 논블럭은 동기, 비동기와 연결되는 개념)
	- 블록 : 
		1. 동기의 개념과 비슷하다.
			ex) 브라우저가 실행되는 시간이 10분(요청)이라고 가정했을 때
				브라우저가 오픈 되기전까지 다른 브라우저도 계속 대기해야 하는 상태를 블록 상태라 한다.
	- 논블록 : 
		1. 비동기의 개념과 비슷하다.
			ex) 브라우저가 실행되는 시간이 10분(요청)이라고 가정했을 때
				브라우저가 오픈 되기전이라 하여도 다른 브라우저는 대기하지 않고 제약없이 자유롭게
				브라우저를 사용할 수 있는 상태를 논블록 상태라 한다.
				
				
				
				

