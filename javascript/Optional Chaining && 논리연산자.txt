# (?.) Optional Chaining  
(Optional chaining)   참고 사이트 => https://ko.javascript.info/optional-chaining
	+ 프로퍼티가 없는 중첩 객체를 에러 없이 안전하게 접근할 수 있습니다.
	+ ?.은 ?.'앞’의 평가 대상이 undefined나 null이면 평가를 멈추고 undefined를 반환합니다.
	  undefined나 null이 아니라면 평가를 계속 진행합니다.
		ex) let user = {}; // 주소 정보가 없는 사용자
				alert( user?.address?.street ); // undefined, 에러가 발생하지 않습니다.
		ex) let user = null;
				alert( user?.address ); // undefined
				alert( user?.address.street ); // undefined
	
	+ 위 예시에서 사용된 user?.는 user가 null이나 undefined인 경우만 처리할 수 있습니다.
		user가 null이나 undefined가 아니고 실제 값이 존재하는 경우엔 반드시 user.address 프로퍼티는 있어야 합니다.
			그렇지 않으면 user?.address.street의 두 번째 점 연산자에서 에러가 발생합니다. 여기서 에러가 나지 않으려면 user?.address?.street 작성해야합니다.
	
	+ 주의 사항 : 
		1. ?.는 존재하지 않아도 괜찮은 대상에만 사용해야 합니다.
			사용자 주소를 다루는 위 예시에서 논리상 user는 반드시 있어야 하는데 address는 필수값이 아닙니다. 
				그러니 user.address?.street를 사용하는 것이 바람직합니다.
		2. ?.앞의 변수는 꼭 선언되어 있어야 합니다.
			변수 user가 선언되어있지 않으면 user?.anything 평가시 에러가 발생합니다.
				user?.address;  //  ReferenceError: user is not defined
		3. 꼭 있어야 하는 값인데 없는 경우에 ?.을 사용하면 에러가 뜨지 않기 때문에 프로그래밍 에러를 쉽게 찾을 수 없습니다. 
		4. 읽기, 삭제하기는 가능하지만 쓰기는 사용할 수 없다.
		





 참고 사이트 => https://velog.io/@devky/TIL-Javascript-%EC%B5%9C%EC%8B%A0-%EB%AC%B8%EB%B2%95-%EC%A0%95%EB%A6%AC
# (??) Nullish Coalescing Operator
	+ ?? 연산자를 사용하면 nullish 즉, undefined와 null에 대해서만 기본값 처리를 할 수 있습니다.
	+ ?? 연산자는 다음과 같이 좌항이 undefined와 null이 아닌 경우에만 우항을 선택하며, 그 외의 경우에는 항상 좌항을 선택합니다.
		ex) function isEnabled(options) {
				return options.enabled ?? true;
			}
			
		> isEnabled({})
			true
		> isEnabled({enabled: null})
			true
		> isEnabled({enabled: false})
			false
			
			
			
# 논리연산자 || , &&  단축평가
 	참고 사이트 => https://curryyou.tistory.com/193
		