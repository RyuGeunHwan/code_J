# 깊은 복사(Deep Copy) : JSON.parse && JSON.stringify  ,  라이브러리 사용(Lodash)
	참고 사이트 => https://webisfree.com/2020-02-17/[%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8]-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%83%88%EB%A1%9C%EC%9A%B4-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EB%B3%B5%EC%82%AC-clone%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95
	1. 객체의 실제 값을 복사
	2. 깊은 복사된 객체는 객체 안에 객체가 있을 경우에도 원본과의 참조가 완전히 끊어진 객체

	+ JSON.parse && JSON.stringify
			1. 'JSON.stringify()'는 객체를 json 문자열로 변환하는데 이 과정에서 원본 객체와의 참조가 모두 끊어진다.
			2. 객체를 json 문자열로 변환 후, JSON.parse()를 이용해 다시 원래 객체(자바스크립트 객체)로 만들어준다.
				ex) const obj = {
					  a: 1,
					  b: {
						c: 2,
					  },
					};

					const copiedObj = JSON.parse(JSON.stringify(obj));

					copiedObj.b.c = 3
					
			console.log(obj === copiedObj); //false
			console.log(obj.b.c === copiedObj.b.c); //false
			console.log(obj.b.c); // 2
			console.log(copiedObj.b.c); // 3
				
	+ 라이브러리 사용 : Clonedeep라이브러리 == Lodash문법
			'Lodash' 라이브러리를 사용하면 깊은 복사를 더 쉽게 할 수 있다.
				ex) const obj = {
					  a: 1,
					  b: {
						c: 2,
					  },
					};

			***		const copiedObj = _.cloneDeep(obj);

					copiedObj.b.c = 3

			console.log(obj === copiedObj); //false
			console.log(obj.b.c === copiedObj.b.c); //false
			console.log(obj.b.c); // 2
			console.log(copiedObj.b.c); // 3

# 얕은 복사(shllow Copy) : slice()복사 , spread복사 , Object.assign()복사

	1. 객체의 참조값(주소 값)을 복사
	2. 얕은 복사란 객체를 복사할 때 기존 값과 복사된 값이 같은 참조를 가리키고 있는 것
	3. 객체 안에 객체가 있을 경우 한 개의 객체라도 기존 변수의 객체를 참조하고 있다면 이를 얕은 복사라고 한다.
	4. 참조값은 변수가 객체의 주소를 가리키는 값이기 때문에 복사된 값(주소)이 같은 값을 가리킨다.
	
	+ Array.prototype.slice() : 배열로 부터 특정 범위를 복사한 값들을 담고 있는 새로운 배열을 만드는데 사용한다.
	+ Array​.prototype​.splice() : 배열로 부터 특정 범위를 삭제하거나 새로운 값을 추가 또는 기존 값을 대체할 수 있다.
			참고 사이트 => https://www.daleseo.com/js-array-slice-splice/
			참고 사이트 => https://im-developer.tistory.com/103
	+ Object.assign() : Object.assign은 첫번째 요소로 들어온 객체에 다음인자로 들어온 객체를 복사해준다.
			ex) const obj = {
				  a: 1,
				  b: {
					c: 2,
				  },
				};

		***		const copiedObj = Object.assign({}, obj);

				copiedObj.b.c = 3

				obj === copiedObj // false
				obj.b.c === copiedObj.b.c // true
					//Object.assign()을 이용하면 객체 자체는 깊은 복사가 수행되지만, 2차원 이상의 객체는 얕은 복사가 수행된다.
					 //그래서 1차원 객체인 obj는 깊은복사(완전히 독립적인 객체)이기 때문에 false가 나온다.
					  // obj.b.c는 2차원 객체이기 때문에 얕은복사(같은 참조(=메모리 주소)를 가르키고있다.)가 이루어졌기 때문에 true가 나오는 것이다.
	
	+ Spread 연산자 (전개 구문) : 객체 앞에 ... 을 사용하여 원하는 값을 합친다.
			- 전개 연산자를 이용한 복사에는 1차원에서만 유효하다.
			- 1차원 배열or객체와 1차원 배열or객체를 push하여서 넣어준다면 2차원 배열or객체로 생성되어 합쳐진다.
			- spread연산자를 사용하거나 push.apply를 사용하게되면 1차원 배열로 합쳐진다.
			- 내부 객체가 존재하는 경우 깊은 복사(deep copy)의 예외가 존재할 수 있다는 점이 있다.
			ex) const arr1 = [1, 2, 3];
				const arr2 = [4, 5, 6];
				const arrWrap = [...arr1, ...arr2, 7,8,9];

				console.log(arrWrap); // [1, 2, 3, 4, 5, 6, 7, 8, 9]
				
			ex) obj1의 name 프로퍼티만 변경하고 싶은 경우, 
				const obj1 = { name: 'John', age: '20', flag: 'true', foo: 'bar' };
				
				const newObj = { ...obj1, name: 'Alice' };
				// Object { name: 'Alice', age: '20', flag: 'true', foo: 'bar' }

				console.log(obj1 === newObj); // false
			참고 사이트 => https://ywtechit.tistory.com/208
			참고 사이트 => https://learnjs.vlpt.us/useful/07-spread-and-rest.html
			참고 사이트 => https://webisfree.com/2020-02-17/[%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8]-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%83%88%EB%A1%9C%EC%9A%B4-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EB%B3%B5%EC%82%AC-clone%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95
	
		
		
			
# 주의사항 : 1차원 배열은 깊은 복사, 2차원 배열은 얕은 복사를 하여야 한다.
		why? 1차원 배열의 경우 값이 원시 타입이기 때문에 원시 타입에 새로운 값 할당 시 독립적인 메모리 공간을 생성하여 이 메모리 공간에 새로운 데이터가 추가되어 서로 다른 참조를 바라보게 된다. 
			  그렇기 때문에 깊은 복사처럼 보인다.
			  
			 하지만 2차원 배열의 경우 내부 배열도 참조 타입이기 때문에 메모리 힙에 독립적인 공간에 존재하지만 [[2차원 배열의 주소값], 
			  원시 타입]과 같이 결국 내부 배열의 메모리 주소를 바라보고 있으므로 최종적으로 같은 참조를 바라보게 되는 것이다.
				ex) const test = [[1, 2, 3], 100];
				const copy = test.slice();

				test[0].push(10);
				test[1] = 200;

				console.log(test); // [[1, 2, 3, 10], 200]
				console.log(copy); // [[1, 2, 3, 10], 100]
				//2차원 배열인 1,2,3,10은 얕은 복사로... 1차원 배열인 200과 100은 깊은 복사로 들어간다.