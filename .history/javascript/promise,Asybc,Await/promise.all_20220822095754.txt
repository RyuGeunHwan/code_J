# promise.all 개념 : 
    Promise.all은 여러 비동기 동작(promise)을 하나로 묶어 하나의 promise처럼 관리하여 처리한다.
        여러개의 promise를 동시에 실행시키고 모든 프라미스 동시에 반환할 수 있다.
            Promise.all() 은 실행할 비동기 태스크들이 담긴 배열을 인자로 받습니다.
                배열 안 프라미스가 모두 처리되면 새로운 프라미스가 이행, 배열 안 프라미스의 결괏값을 담은 배열이 새로운 프라미스의 result가 된다.
                    **promise.all에 전달 되는 promise 중 하나라도 거부되면,(연대책임) promise.all이 반환하는 promise는 error와 함께 거부되고 catch가 실행된다.
    주의 사항) Promise.all 내부에서는 태스크들의 순서가 제어되지 않기 때문에, 태스크의 순서가 중요한 경우라면 절대로 Promise.all을 통해 관리해서는 안된다는 점이다.



# promise.all  ==  
        세개의 작업을 동시에 실행했다고 가정했을 때 가장 *늦게 끝나는 작업이 끝나는 시점부터 그 다음 작업이 시작되는 방식

# promise.race  ==  
        세개의 작업을 동시에 실행했다고 가정했을 때 가장 *일찍 끝나는 작업이 끝나게되면 나머지 작업은 무시하고 그 다음 작업을 시작하는 방식


# promise.allsettled()  == 
    ***일반적으로 서로의 성공 여부에 관련 없이 여러 비동기 작업을 수행해야 하거나, 항상 각 프로미스의 실행 결과를 알고 싶을 때 사용한다.
        여러 프로미스를 병렬적으로 처리하되, 하나의 프로미스가 실패해도 무조건 이행(fulfilled)한다.
            멤버가 모두 Promise인, 배열(Array)과 같은 이터러블 객체이다.

    ex) const promise1 = Promise.resolve(3);        // 성공
        const promise2 = Promise.reject('error');   // 실패

        Promise.allSettled([promise1, promise2])
            .then(() => console.log('success'))
            .catch(() => console.log('error'));

        // result ==> success  (error가 생겼는데도 catch로 넘어가지 않았다.)

참고 사이트 => https://merrily-code.tistory.com/214
