# 데이터바인딩 : 뷰와 모델에 있는 데이터를 동일하게 만들어주는 것.


# 양방향 데이터 바인딩 : 
	+ 1. 뷰와 모델의 데이터를 동기화하는 것.
	  2. 사용자의 입력값에 따라 js의 데이터가 변경되고, js의 데이터가 변경되면 사용자의 화면도 변경된다.
	  3. 데이터의 변경을 프레임워크에서 감지하고 있다가 데이터가 변경되는 시점에 DOM객체에 렌더링을 해주거나 페이지 내에서 모델의 변경을 감지해 JS실행부에서 변경합니다. 
			입력된 값이나 변경된 값에 따라 내용이 바로 바뀌기 때문에 따로 체크해주지 않아도 됩니다.
	+ 장점 : 코드의 양이 줄어든다.(데이터가 자동으로 변경된다.)
	+ 단점 : 변화에 따라 DOM 객체 전체를 렌더링 하거나 데이터를 바꿔 성능이 감소되는 경우가 있다.
	+ ● v-model과 V-on을 통해 양방향 데이터 바인딩을 합니다.
	  ● v-model이 DOM 연관된 내용을 잡아내고, vue가 바라보는 대상의 속성과 연결됩니다.
	  ● v-on은 이벤트를 잡아내는 데 사용합니다.
	
# 단방향 데이터 바인딩 : 
	+ 1. 한쪽 방향으로만 제어가 가능한 것
	  2. js에서는 사용자의 화면을 변경할 수 있다.
	  3. 사용자는 js에 있는 데이터를 자동적으로 변경시키지 못하기때문에 변화된 값을 감지하여 데이터 바인딩을 시켜주어야한다.
	  4. 사용자의 입력에 따라 데이터를 갱신하고 화면을 업데이트해야 하므로 단방향 데이터 바인딩을 구성하면 데이터의 변화를 감지하고 화면을 업데이트하는 코드를 매번 작성해주어야 한다.
	+ 장점 : 성능 저하 없이 DOM을 렌더링 시켜준다.
			데이터 흐름이 단방향(부모 -> 하위 컴포넌트)이어서 코드를 이해하기 쉽고 데이터의 추적과 디버깅이 쉽다.
	+ 단점 : 변화된 값을 매번 감지하고 바인딩하기 때문에 코드가 길어지고 업데이트하는 코드를 매번 작성해야한다.